#!/usr/bin/env bash
# shellcheck disable=SC2034
# ==================================================================
# tag-version
# ==================================================================
# Release Manager
#
# File:         tag-version
# Author:       Ragdata
# Date:         03/09/2023
# License:      MIT License
# Copyright:    Copyright Â© 2023 Darren (Ragdata) Poulton
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
declare -gx RM_DEBUG=0
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1,,}" == "debug" ]]; then shift; RM_DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# ==================================================================
# VARIABLES
# ==================================================================
readonly RM_BIN="$(dirname "$0")"
readonly RM_LIB="$(dirname "$(dirname "$0")")"
readonly DEFAULT_VERSION="0.1.0"
# ==================================================================
# DEPENDENCIES
# ==================================================================
source "$RM_LIB"/utilities.sh
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# tag::create
# ------------------------------------------------------------------
tag::create()
{
	local -r tag="${1}"
	echo "Creating Git Tag: '$tag'"
	git tag "$tag" || { echo "Could not create tag '$tag'"; exit 1; }
	git push -u origin "$tag" || { echo "Could not push tag '$tag'"; exit 1; }
	echo "Pushed Tag '$tag' to Repository"
}
# ------------------------------------------------------------------
# bump::PatchVersion
# ------------------------------------------------------------------
bump::patchVersion()
{
	local -r version="${1}"
	local IFS='.'							# make sure you're using local here so that you don't break all your other scripts
	read -ra versionParts <<< "$version"	# split to (-a:) array without (-r:) allowing backslashes to escape
	((versionParts[2]++))					# increment patch version (third value; major.minor.<patch>)
	newVersion="${versionParts[*]}"			# join parts back together using the same IFS
	echo "$newVersion"
}
# ------------------------------------------------------------------
# is::latestCommitTagged
# ------------------------------------------------------------------
is::latestCommitTagged()
{
	local latestCommit latestCommitTag
	if ! latestCommit="$(git rev-parse HEAD)" && ! utilities::hasValue "$latestCommit"; then
		echo "Could not read value of latest commit"
		exit 1
	fi
	if ! latestCommitTag="$(git tag --points-at "$latestCommit")"; then
		echo "Could not read tags from latest commit"
		exit 1
	fi
	if ! utilities::hasValue "$latestCommitTag"; then return 1; fi
	if ! utilities::isValidVersion "$latestCommitTag"; then
		echo "Latest tag committed '$latestCommitTag' in commit '$latestCommit' is not a valid version string"
		exit 1
	fi
	return 0
}
# ==================================================================
# MAIN
# ==================================================================
if ! utilities::hasTags; then
	echo "There are no tags present within this repository"
	tag::create "$DEFAULT_VERSION"
	exit 0
fi
if is::latestCommitTagged; then
	echo "Skipping tag push.  Latest commit is already correctly tagged."
	exit 0
fi
if ! lastVersion="$(utilities::previousVersion)"; then
	echo "Could not retrieve latest version '$lastVersion'"
	exit 1
fi
if ! newVersion="$(tag::create "$lastVersion")" || utilities::isEmpty "$newVersion"; then
	echo "Failed to bump to the new version"
	exit 1
fi

echo "Updating from '$lastVersion' to '$newVersion'"

tag::create "$newVersion"
