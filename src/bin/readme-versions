#!/usr/bin/env bash
# shellcheck disable=SC2034
# ==================================================================
# readme-versions
# ==================================================================
# Release Manager
#
# File:         readme-versions
# Author:       Ragdata
# Date:         03/09/2023
# License:      MIT License
# Copyright:    Copyright Â© 2023 Darren (Ragdata) Poulton
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
declare -gx DOC_DEBUG=0
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1,,}" == "debug" ]]; then shift; DOC_DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# ==================================================================
# VARIABLES
# ==================================================================
readonly RM_BIN="$(dirname "$0")"
readonly RM_LIB="$(dirname "$(dirname "$0")")"
readonly DEFAULT_VERSION="0.1.0"
# ==================================================================
# DEPENDENCIES
# ==================================================================
source "$RM_LIB"/utilities.sh
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# readme::replace
# ------------------------------------------------------------------
readme::replace()
{
	local -r fileName="${1}" oldVersion="${2}" newVersion="${3}"
	sed -e "s/${oldVersion}/${newVersion}/g" "$fileName" > "$fileName.tmp" || { echo "Search & Replace Failed!"; exit 1; }
	mv "$fileName.tmp" "$fileName" || { echo "File update on '$fileName' failed!"; exit 1; }
}
# ------------------------------------------------------------------
# file::contains
# ------------------------------------------------------------------
file::contains()
{
	local -r fileName="${1}" text="${2}"
	case $(grep -q "$text" "$fileName"; echo $?) in
		0)  return 0;;	# FOUND
		1)  return 1;;	# NOT FOUND
		*)  # ERROR
			echo "Unable to check if '$fileName' has '$text'"
			exit 1
			;;
	esac
}
# ==================================================================
# MAIN
# ==================================================================
declare oldVersion
declare fileName="README.md"

if ! oldVersion=$(utilities::previousVersion); then
	echo "Failed to obtain previous version: $oldVersion"
	exit 1
fi
if ! utilities::fileExists "$fileName"; then
	echo "File '$fileName' Not Found ... Skipping"
fi
if ! newVersion="$(utilities::latestVersion)"; then
	echo "Unable to retrieve the latest version: $newVersion"
	exit 1
fi

readme::replace "$fileName" "$oldVersion" "$newVersion"

git add "$fileName" || { echo "Failed to add '$fileName' to git"; exit 1; }
